# serverless.yml

service:
  name: decision-maker

frameworkVersion: '2'

plugins:
  - serverless-pseudo-parameters
  - serverless-webpack
  - serverless-step-functions
  - serverless-step-functions-offline
  - serverless-offline

package:
  # https://github.com/serverless-heaven/serverless-webpack/issues/299
  individually: false

custom:
  webpack:
    includeModules:
      forceExclude:
        - aws-sdk
  stepFunctionsOffline:
    ParseRequestState: parseRequest
    RollDiceState: rollDice
    RollCoinState: rollCoin
    RollNumberState: rollNumber
    createResponseState: createResponse

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev # Set the default stage used. Default is dev
  region: ap-southeast-2 # Overwrite the default region used. Default is us-east-1
  memorySize: 128 # Overwrite the default memory size. Default is 1024
  timeout: 6 # The default is 6
  tracing:
    apiGateway: true
    lambda: Active
  versionFunctions: false
  iamRoleStatements:
    - Effect: Allow
      Action:
        - states:StartExecution
      Resource: ${self:resources.Outputs.RollStateMachineARN.Value}
    - Effect: 'Allow'
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource:
        - '*'

functions:
  roll:
    handler: src/roll.handler # The file and module for this specific function.
    environment:
      STATE_MACHINE_ARN: ${self:resources.Outputs.RollStateMachineARN.Value}
    events: # The Events that trigger this Function
      - http: # This creates an API Gateway HTTP endpoint which can be used to trigger this function.  Learn more in "events/apigateway"
          path: roll # Path for this endpoint
          method: post # HTTP method for this endpoint
          cors: true # Turn on CORS for this endpoint, but don't forget to return the right header in your response
          private: false # Requires clients to add API keys values in the `x-api-key` header of their request
  parseRequest: # A Function
    handler: src/parse-request.handler # The file and module for this specific function.
    description: Parse request from slack.
  rollDice:
    handler: src/roll-dice.handler # The file and module for this specific function.
    description: Roll a dice.
  rollCoin:
    handler: src/roll-coin.handler # The file and module for this specific function.
    description: Roll a coin.
  rollNumber:
    handler: src/roll-number.handler # The file and module for this specific function.
    description: Return a random number.
  createResponse:
    handler: src/create-response.handler # The file and module for this specific function.
    description: Generate response for slack.

stepFunctions:
  stateMachines:
    RollStateMachine:
      name: RollStateMachine
      definition:
        Comment: 'An example of the Amazon States Language using choice state'
        StartAt: ParseRequestState
        States:
          ParseRequestState:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:decision-maker-${opt:stage, self:provider.stage}-parseRequest
            Next: ChoiceState
          ChoiceState:
            Type: Choice
            Choices:
              - Variable: '$.type'
                NumericEquals: 1
                Next: RollDiceState
              - Variable: '$.type'
                NumericEquals: 2
                Next: RollCoinState
              - Variable: '$.type'
                NumericEquals: 3
                Next: RollNumberState
            Default: DefaultState
          RollDiceState:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:decision-maker-${opt:stage, self:provider.stage}-rollDice
            Next: createResponseState
          RollCoinState:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:decision-maker-${opt:stage, self:provider.stage}-rollCoin
            Next: createResponseState
          RollNumberState:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:decision-maker-${opt:stage, self:provider.stage}-rollNumber
            Next: createResponseState
          DefaultState:
            Type: Fail
            Cause: 'No Matches!'
          createResponseState:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:decision-maker-${opt:stage, self:provider.stage}-createResponse
            End: true

resources:
  Outputs:
    RollStateMachineARN:
      Description: The ARN of the roll state machine
      Value:
        Ref: RollStateMachine
